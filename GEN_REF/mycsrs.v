
// File autogenerated by gen_csr 2.00

module mycsrs(
   // outputs
   PRDATA,
   PREADY,
   PSLVERR,
   mmio_ext_rdata_vld,
   mmio_ext_rdata,
   int__respq_notempty,
   int__respq_full,
   int__cmdq_empty,
   infifo0__full,
   sdaoen__val,
   scloen__val,
   scratch_pad_c_4__val,
   scratch_pad_c_4__val_D,
   scratch_pad_c_4__val_wr_trigger_D,
   scratch_pad_c_5__val,
   scratch_pad_c_5__val_D,
   scratch_pad_c_5__val_wr_trigger_D,
   scratch_pad_d_0__val,
   scratch_pad_d_0__val_D,
   scratch_pad_d_0__val_wr_trigger_D,
   scratch_pad_d_1__val,
   scratch_pad_d_1__val_D,
   scratch_pad_d_1__val_wr_trigger_D,
   scratch_pad_d_2__val,
   scratch_pad_d_2__val_D,
   scratch_pad_d_2__val_wr_trigger_D,
   scratch_pad_d_3__val,
   scratch_pad_d_3__val_D,
   scratch_pad_d_3__val_wr_trigger_D,
   scratch_pad_d_4__val,
   scratch_pad_d_4__val_D,
   scratch_pad_d_4__val_wr_trigger_D,
   scratch_pad_d_5__val,
   scratch_pad_d_5__val_D,
   scratch_pad_d_5__val_wr_trigger_D,
   scratch_pad_d_6__val,
   scratch_pad_d_6__val_D,
   scratch_pad_d_6__val_wr_trigger_D,
   scratch_pad_d_7__val,
   scratch_pad_d_7__val_D,
   scratch_pad_d_7__val_wr_trigger_D,
   scratch_pad_d_8__val,
   scratch_pad_d_8__val_D,
   scratch_pad_d_8__val_wr_trigger_D,
   scratch_pad_d_9__val,
   scratch_pad_d_9__val_D,
   scratch_pad_d_9__val_wr_trigger_D,
   scratch_pad_d_10__val,
   scratch_pad_d_10__val_D,
   scratch_pad_d_10__val_wr_trigger_D,
   scratch_pad_d_11__val,
   scratch_pad_d_11__val_D,
   scratch_pad_d_11__val_wr_trigger_D,
   scratch_pad_d_12__val,
   scratch_pad_d_12__val_D,
   scratch_pad_d_12__val_wr_trigger_D,
   scratch_pad_d_13__val,
   scratch_pad_d_13__val_D,
   scratch_pad_d_13__val_wr_trigger_D,
   scratch_pad_d_14__val,
   scratch_pad_d_14__val_D,
   scratch_pad_d_14__val_wr_trigger_D,
   scratch_pad_d_15__val,
   scratch_pad_d_15__val_D,
   scratch_pad_d_15__val_wr_trigger_D,
   // inputs
   PCLK,
   PRESETN,
   PSEL,
   PENABLE,
   PWRITE,
   PADDR,
   PWDATA,
   PSTRB,
   mmio_ext_en,
   mmio_ext_write,
   mmio_ext_address,
   mmio_ext_wdata,
   infifo0__notempty,
   infifo0__full_intr,
   outfifo0__notempty,
   outfifo0__full,
   sdain__val,
   sclin__val
);

//--- PORTS ---
input  PCLK ;
input  PRESETN ;
input  PSEL ;
input  PENABLE ;
input  PWRITE ;
input [ 15:0 ] PADDR ;
input [ 31:0 ] PWDATA ;
output [ 31:0 ] PRDATA ;
output  PREADY ;
output  PSLVERR ;
input [ 3:0 ] PSTRB ;
output  int__respq_notempty ;
output  int__respq_full ;
output  int__cmdq_empty ;
input  infifo0__notempty ;
input  infifo0__full_intr ;
output  infifo0__full ;
input  outfifo0__notempty ;
input  outfifo0__full ;
output  sdaoen__val ;
output  scloen__val ;
input  sdain__val ;
input  sclin__val ;
output [ 31:0 ] scratch_pad_c_4__val ;
output [ 31:0 ] scratch_pad_c_4__val_D ;
output  scratch_pad_c_4__val_wr_trigger_D ;
output [ 31:0 ] scratch_pad_c_5__val ;
output [ 31:0 ] scratch_pad_c_5__val_D ;
output  scratch_pad_c_5__val_wr_trigger_D ;
output [ 31:0 ] scratch_pad_d_0__val ;
output [ 31:0 ] scratch_pad_d_0__val_D ;
output  scratch_pad_d_0__val_wr_trigger_D ;
output [ 31:0 ] scratch_pad_d_1__val ;
output [ 31:0 ] scratch_pad_d_1__val_D ;
output  scratch_pad_d_1__val_wr_trigger_D ;
output [ 31:0 ] scratch_pad_d_2__val ;
output [ 31:0 ] scratch_pad_d_2__val_D ;
output  scratch_pad_d_2__val_wr_trigger_D ;
output [ 31:0 ] scratch_pad_d_3__val ;
output [ 31:0 ] scratch_pad_d_3__val_D ;
output  scratch_pad_d_3__val_wr_trigger_D ;
output [ 31:0 ] scratch_pad_d_4__val ;
output [ 31:0 ] scratch_pad_d_4__val_D ;
output  scratch_pad_d_4__val_wr_trigger_D ;
output [ 31:0 ] scratch_pad_d_5__val ;
output [ 31:0 ] scratch_pad_d_5__val_D ;
output  scratch_pad_d_5__val_wr_trigger_D ;
output [ 31:0 ] scratch_pad_d_6__val ;
output [ 31:0 ] scratch_pad_d_6__val_D ;
output  scratch_pad_d_6__val_wr_trigger_D ;
output [ 31:0 ] scratch_pad_d_7__val ;
output [ 31:0 ] scratch_pad_d_7__val_D ;
output  scratch_pad_d_7__val_wr_trigger_D ;
output [ 31:0 ] scratch_pad_d_8__val ;
output [ 31:0 ] scratch_pad_d_8__val_D ;
output  scratch_pad_d_8__val_wr_trigger_D ;
output [ 31:0 ] scratch_pad_d_9__val ;
output [ 31:0 ] scratch_pad_d_9__val_D ;
output  scratch_pad_d_9__val_wr_trigger_D ;
output [ 31:0 ] scratch_pad_d_10__val ;
output [ 31:0 ] scratch_pad_d_10__val_D ;
output  scratch_pad_d_10__val_wr_trigger_D ;
output [ 31:0 ] scratch_pad_d_11__val ;
output [ 31:0 ] scratch_pad_d_11__val_D ;
output  scratch_pad_d_11__val_wr_trigger_D ;
output [ 31:0 ] scratch_pad_d_12__val ;
output [ 31:0 ] scratch_pad_d_12__val_D ;
output  scratch_pad_d_12__val_wr_trigger_D ;
output [ 31:0 ] scratch_pad_d_13__val ;
output [ 31:0 ] scratch_pad_d_13__val_D ;
output  scratch_pad_d_13__val_wr_trigger_D ;
output [ 31:0 ] scratch_pad_d_14__val ;
output [ 31:0 ] scratch_pad_d_14__val_D ;
output  scratch_pad_d_14__val_wr_trigger_D ;
output [ 31:0 ] scratch_pad_d_15__val ;
output [ 31:0 ] scratch_pad_d_15__val_D ;
output  scratch_pad_d_15__val_wr_trigger_D ;


input  mmio_ext_en ;
input  mmio_ext_write ;
input [ 7:0 ] mmio_ext_address ;
input [ 31:0 ] mmio_ext_wdata ;
output  mmio_ext_rdata_vld ;
output [ 31:0 ] mmio_ext_rdata ;

//--- DECL ---
reg [ 31:0 ] PRDATA ;
reg [ 31:0 ] PRDATA_D ;
reg PSEL_Q ;
reg rd_decerr ;
reg wr_decerr ;
wire [ 31:0 ] wr_en_mask ;
assign wr_en_mask = { {8{PSTRB[3]}}, {8{PSTRB[2]}}, {8{PSTRB[1]}}, {8{PSTRB[0]}} } ;
reg  int__respq_notempty ;
reg  int__respq_notempty_D ;
reg  int__respq_full ;
reg  int__respq_full_D ;
reg  int__cmdq_empty ;
reg  int__cmdq_empty_D ;
wire [ 28:0 ] int__res ;
assign int__res = 29'h0 ;
reg  intenable__respq_notempty ;
reg  intenable__respq_notempty_D ;
reg  intenable__respq_full ;
reg  intenable__respq_full_D ;
reg  intenable__cmdq_empty ;
reg  intenable__cmdq_empty_D ;
wire [ 28:0 ] intenable__res ;
assign intenable__res = 29'h0 ;
reg  status__respq_notempty ;
reg  status__respq_notempty_D ;
reg  status__respq_full ;
reg  status__respq_full_D ;
reg  status__cmdq_notempty ;
reg  status__cmdq_notempty_D ;
reg  status__cmdq_full ;
reg  status__cmdq_full_D ;
wire [ 26:0 ] status__res ;
assign status__res = 27'h0 ;
reg  status__errorflag ;
reg  status__errorflag_D ;
reg [ 3:0 ] conf__numretriesbeforeerror ;
reg [ 3:0 ] conf__numretriesbeforeerror_D ;
reg [ 7:0 ] conf__cmdq_almostemptylevel ;
reg [ 7:0 ] conf__cmdq_almostemptylevel_D ;
reg [ 7:0 ] conf__respq_almostfulllevel ;
reg [ 7:0 ] conf__respq_almostfulllevel_D ;
reg [ 7:0 ] conf__halfbitdelay ;
reg [ 7:0 ] conf__halfbitdelay_D ;
reg  infifo0__notempty_D ;
reg  infifo0__full ;
reg  infifo0__full_D ;
reg  outfifo0__notempty_D ;
reg  outfifo0__full_D ;
reg  sdaoen__val ;
reg  sdaoen__val_D ;
reg [ 30:0 ] sdaoen__res ;
reg [ 30:0 ] sdaoen__res_D ;
reg  scloen__val ;
reg  scloen__val_D ;
reg [ 30:0 ] scloen__res ;
reg [ 30:0 ] scloen__res_D ;
reg  sdain__val_D ;
reg [ 30:0 ] sdain__res ;
reg [ 30:0 ] sdain__res_D ;
reg  sclin__val_D ;
reg [ 30:0 ] sclin__res ;
reg [ 30:0 ] sclin__res_D ;
reg [ 31:0 ] scratch_pad_a_0__val ;
reg [ 31:0 ] scratch_pad_a_0__val_D ;
reg [ 31:0 ] scratch_pad_a_1__val ;
reg [ 31:0 ] scratch_pad_a_1__val_D ;
reg [ 31:0 ] scratch_pad_a_2__val ;
reg [ 31:0 ] scratch_pad_a_2__val_D ;
reg [ 31:0 ] scratch_pad_a_3__val ;
reg [ 31:0 ] scratch_pad_a_3__val_D ;
reg [ 31:0 ] scratch_pad_a_4__val ;
reg [ 31:0 ] scratch_pad_a_4__val_D ;
reg [ 31:0 ] scratch_pad_a_5__val ;
reg [ 31:0 ] scratch_pad_a_5__val_D ;
reg [ 31:0 ] scratch_pad_a_6__val ;
reg [ 31:0 ] scratch_pad_a_6__val_D ;
reg [ 31:0 ] scratch_pad_a_7__val ;
reg [ 31:0 ] scratch_pad_a_7__val_D ;
reg [ 31:0 ] scratch_pad_a_8__val ;
reg [ 31:0 ] scratch_pad_a_8__val_D ;
reg [ 31:0 ] scratch_pad_a_9__val ;
reg [ 31:0 ] scratch_pad_a_9__val_D ;
reg [ 31:0 ] scratch_pad_b_0__val ;
reg [ 31:0 ] scratch_pad_b_0__val_D ;
reg [ 31:0 ] scratch_pad_b_1__val ;
reg [ 31:0 ] scratch_pad_b_1__val_D ;
reg [ 31:0 ] scratch_pad_b_2__val ;
reg [ 31:0 ] scratch_pad_b_2__val_D ;
reg [ 31:0 ] scratch_pad_b_3__val ;
reg [ 31:0 ] scratch_pad_b_3__val_D ;
reg [ 31:0 ] scratch_pad_b_4__val ;
reg [ 31:0 ] scratch_pad_b_4__val_D ;
reg [ 31:0 ] scratch_pad_b_5__val ;
reg [ 31:0 ] scratch_pad_b_5__val_D ;
reg [ 31:0 ] scratch_pad_b_6__val ;
reg [ 31:0 ] scratch_pad_b_6__val_D ;
reg [ 31:0 ] scratch_pad_b_7__val ;
reg [ 31:0 ] scratch_pad_b_7__val_D ;
reg [ 31:0 ] scratch_pad_b_8__val ;
reg [ 31:0 ] scratch_pad_b_8__val_D ;
reg [ 31:0 ] scratch_pad_b_9__val ;
reg [ 31:0 ] scratch_pad_b_9__val_D ;
reg [ 31:0 ] scratch_pad_c_4__val ;
reg [ 31:0 ] scratch_pad_c_4__val_D ;
reg scratch_pad_c_4__val_wr_trigger_D ;
reg [ 31:0 ] scratch_pad_c_5__val ;
reg [ 31:0 ] scratch_pad_c_5__val_D ;
reg scratch_pad_c_5__val_wr_trigger_D ;
reg [ 31:0 ] scratch_pad_d_0__val ;
reg [ 31:0 ] scratch_pad_d_0__val_D ;
reg scratch_pad_d_0__val_wr_trigger_D ;
reg [ 31:0 ] scratch_pad_d_1__val ;
reg [ 31:0 ] scratch_pad_d_1__val_D ;
reg scratch_pad_d_1__val_wr_trigger_D ;
reg [ 31:0 ] scratch_pad_d_2__val ;
reg [ 31:0 ] scratch_pad_d_2__val_D ;
reg scratch_pad_d_2__val_wr_trigger_D ;
reg [ 31:0 ] scratch_pad_d_3__val ;
reg [ 31:0 ] scratch_pad_d_3__val_D ;
reg scratch_pad_d_3__val_wr_trigger_D ;
reg [ 31:0 ] scratch_pad_d_4__val ;
reg [ 31:0 ] scratch_pad_d_4__val_D ;
reg scratch_pad_d_4__val_wr_trigger_D ;
reg [ 31:0 ] scratch_pad_d_5__val ;
reg [ 31:0 ] scratch_pad_d_5__val_D ;
reg scratch_pad_d_5__val_wr_trigger_D ;
reg [ 31:0 ] scratch_pad_d_6__val ;
reg [ 31:0 ] scratch_pad_d_6__val_D ;
reg scratch_pad_d_6__val_wr_trigger_D ;
reg [ 31:0 ] scratch_pad_d_7__val ;
reg [ 31:0 ] scratch_pad_d_7__val_D ;
reg scratch_pad_d_7__val_wr_trigger_D ;
reg [ 31:0 ] scratch_pad_d_8__val ;
reg [ 31:0 ] scratch_pad_d_8__val_D ;
reg scratch_pad_d_8__val_wr_trigger_D ;
reg [ 31:0 ] scratch_pad_d_9__val ;
reg [ 31:0 ] scratch_pad_d_9__val_D ;
reg scratch_pad_d_9__val_wr_trigger_D ;
reg [ 31:0 ] scratch_pad_d_10__val ;
reg [ 31:0 ] scratch_pad_d_10__val_D ;
reg scratch_pad_d_10__val_wr_trigger_D ;
reg [ 31:0 ] scratch_pad_d_11__val ;
reg [ 31:0 ] scratch_pad_d_11__val_D ;
reg scratch_pad_d_11__val_wr_trigger_D ;
reg [ 31:0 ] scratch_pad_d_12__val ;
reg [ 31:0 ] scratch_pad_d_12__val_D ;
reg scratch_pad_d_12__val_wr_trigger_D ;
reg [ 31:0 ] scratch_pad_d_13__val ;
reg [ 31:0 ] scratch_pad_d_13__val_D ;
reg scratch_pad_d_13__val_wr_trigger_D ;
reg [ 31:0 ] scratch_pad_d_14__val ;
reg [ 31:0 ] scratch_pad_d_14__val_D ;
reg scratch_pad_d_14__val_wr_trigger_D ;
reg [ 31:0 ] scratch_pad_d_15__val ;
reg [ 31:0 ] scratch_pad_d_15__val_D ;
reg scratch_pad_d_15__val_wr_trigger_D ;


//reg mmio_ext_stall;
reg mmio_ext_rdata_vld_D;
reg mmio_ext_rdata_vld;
reg [ 31:0 ] mmio_ext_rdata_D;
reg [ 31:0 ] mmio_ext_rdata;


always @(posedge PCLK or negedge PRESETN) begin
   if (PRESETN == 0)
      PSEL_Q <= 1'b0;
   else
      PSEL_Q <= PSEL;
end

always @(posedge PCLK or negedge PRESETN) begin
   if (PRESETN == 0)
      PRDATA <= 'h0;
   else if (PSEL & ~PWRITE)
      PRDATA <= PRDATA_D;
   else
      PRDATA <= PRDATA;
end

always @(*) begin
   // --- read ---
   PRDATA_D = 32'h0 ;
   rd_decerr = 1'b0 ;
   if (PSEL & ~PWRITE) begin
      case (PADDR)
         16'h1008 : begin // Int
            PRDATA_D[ 0:0 ] = int__respq_notempty ;
            PRDATA_D[ 1:1 ] = int__respq_full ;
            PRDATA_D[ 2:2 ] = int__cmdq_empty ;
            PRDATA_D[ 31:3 ] = int__res ;
         end
         16'h100C : begin // IntEnable
            PRDATA_D[ 0:0 ] = intenable__respq_notempty ;
            PRDATA_D[ 1:1 ] = intenable__respq_full ;
            PRDATA_D[ 2:2 ] = intenable__cmdq_empty ;
            PRDATA_D[ 31:3 ] = intenable__res ;
         end
         16'h1010 : begin // Status
            PRDATA_D[ 0:0 ] = status__respq_notempty ;
            PRDATA_D[ 1:1 ] = status__respq_full ;
            PRDATA_D[ 2:2 ] = status__cmdq_notempty ;
            PRDATA_D[ 3:3 ] = status__cmdq_full ;
            PRDATA_D[ 30:4 ] = status__res ;
            PRDATA_D[ 31:31 ] = status__errorflag ;
         end
         16'h1014 : begin // Conf
            PRDATA_D[ 3:0 ] = conf__numretriesbeforeerror ;
            PRDATA_D[ 15:8 ] = conf__cmdq_almostemptylevel ;
            PRDATA_D[ 23:16 ] = conf__respq_almostfulllevel ;
            PRDATA_D[ 31:24 ] = conf__halfbitdelay ;
         end
         16'h1018 : begin // InFifo0
            PRDATA_D[ 0:0 ] = infifo0__notempty ;
            PRDATA_D[ 1:1 ] = infifo0__full ;
         end
         16'h101C : begin // OutFifo0
            PRDATA_D[ 0:0 ] = outfifo0__notempty ;
            PRDATA_D[ 1:1 ] = outfifo0__full ;
         end
         16'h1020 : begin // SdaOeN
         end
         16'h1024 : begin // SclOeN
         end
         16'h1028 : begin // SdaIn
         end
         16'h102C : begin // SclIn
         end
         16'h1030 : begin // scratch_pad_a_0
            PRDATA_D[ 31:0 ] = scratch_pad_a_0__val ;
         end
         16'h1038 : begin // scratch_pad_a_1
            PRDATA_D[ 31:0 ] = scratch_pad_a_1__val ;
         end
         16'h1040 : begin // scratch_pad_a_2
            PRDATA_D[ 31:0 ] = scratch_pad_a_2__val ;
         end
         16'h1048 : begin // scratch_pad_a_3
            PRDATA_D[ 31:0 ] = scratch_pad_a_3__val ;
         end
         16'h1050 : begin // scratch_pad_a_4
            PRDATA_D[ 31:0 ] = scratch_pad_a_4__val ;
         end
         16'h1058 : begin // scratch_pad_a_5
            PRDATA_D[ 31:0 ] = scratch_pad_a_5__val ;
         end
         16'h1060 : begin // scratch_pad_a_6
            PRDATA_D[ 31:0 ] = scratch_pad_a_6__val ;
         end
         16'h1068 : begin // scratch_pad_a_7
            PRDATA_D[ 31:0 ] = scratch_pad_a_7__val ;
         end
         16'h1070 : begin // scratch_pad_a_8
            PRDATA_D[ 31:0 ] = scratch_pad_a_8__val ;
         end
         16'h1078 : begin // scratch_pad_a_9
            PRDATA_D[ 31:0 ] = scratch_pad_a_9__val ;
         end
         16'h1034 : begin // scratch_pad_b_0
            PRDATA_D[ 31:0 ] = scratch_pad_b_0__val ;
         end
         16'h103C : begin // scratch_pad_b_1
            PRDATA_D[ 31:0 ] = scratch_pad_b_1__val ;
         end
         16'h1044 : begin // scratch_pad_b_2
            PRDATA_D[ 31:0 ] = scratch_pad_b_2__val ;
         end
         16'h104C : begin // scratch_pad_b_3
            PRDATA_D[ 31:0 ] = scratch_pad_b_3__val ;
         end
         16'h1054 : begin // scratch_pad_b_4
            PRDATA_D[ 31:0 ] = scratch_pad_b_4__val ;
         end
         16'h105C : begin // scratch_pad_b_5
            PRDATA_D[ 31:0 ] = scratch_pad_b_5__val ;
         end
         16'h1064 : begin // scratch_pad_b_6
            PRDATA_D[ 31:0 ] = scratch_pad_b_6__val ;
         end
         16'h106C : begin // scratch_pad_b_7
            PRDATA_D[ 31:0 ] = scratch_pad_b_7__val ;
         end
         16'h1074 : begin // scratch_pad_b_8
            PRDATA_D[ 31:0 ] = scratch_pad_b_8__val ;
         end
         16'h107C : begin // scratch_pad_b_9
            PRDATA_D[ 31:0 ] = scratch_pad_b_9__val ;
         end
         16'h1080 : begin // scratch_pad_c_4
            PRDATA_D[ 31:0 ] = scratch_pad_c_4__val ;
         end
         16'h1084 : begin // scratch_pad_c_5
            PRDATA_D[ 31:0 ] = scratch_pad_c_5__val ;
         end
         16'h1088 : begin // scratch_pad_d_0
            PRDATA_D[ 31:0 ] = scratch_pad_d_0__val ;
         end
         16'h108C : begin // scratch_pad_d_1
            PRDATA_D[ 31:0 ] = scratch_pad_d_1__val ;
         end
         16'h1090 : begin // scratch_pad_d_2
            PRDATA_D[ 31:0 ] = scratch_pad_d_2__val ;
         end
         16'h1094 : begin // scratch_pad_d_3
            PRDATA_D[ 31:0 ] = scratch_pad_d_3__val ;
         end
         16'h1098 : begin // scratch_pad_d_4
            PRDATA_D[ 31:0 ] = scratch_pad_d_4__val ;
         end
         16'h109C : begin // scratch_pad_d_5
            PRDATA_D[ 31:0 ] = scratch_pad_d_5__val ;
         end
         16'h10A0 : begin // scratch_pad_d_6
            PRDATA_D[ 31:0 ] = scratch_pad_d_6__val ;
         end
         16'h10A4 : begin // scratch_pad_d_7
            PRDATA_D[ 31:0 ] = scratch_pad_d_7__val ;
         end
         16'h10A8 : begin // scratch_pad_d_8
            PRDATA_D[ 31:0 ] = scratch_pad_d_8__val ;
         end
         16'h10AC : begin // scratch_pad_d_9
            PRDATA_D[ 31:0 ] = scratch_pad_d_9__val ;
         end
         16'h10B0 : begin // scratch_pad_d_10
            PRDATA_D[ 31:0 ] = scratch_pad_d_10__val ;
         end
         16'h10B4 : begin // scratch_pad_d_11
            PRDATA_D[ 31:0 ] = scratch_pad_d_11__val ;
         end
         16'h10B8 : begin // scratch_pad_d_12
            PRDATA_D[ 31:0 ] = scratch_pad_d_12__val ;
         end
         16'h10BC : begin // scratch_pad_d_13
            PRDATA_D[ 31:0 ] = scratch_pad_d_13__val ;
         end
         16'h10C0 : begin // scratch_pad_d_14
            PRDATA_D[ 31:0 ] = scratch_pad_d_14__val ;
         end
         16'h10C4 : begin // scratch_pad_d_15
            PRDATA_D[ 31:0 ] = scratch_pad_d_15__val ;
         end
         default: begin
            PRDATA_D = 32'hbad00add ;
            rd_decerr = 1'b1 ;
         end
      endcase
   end

end

always @(*) begin
   // --- write ---
   wr_decerr = 1'b0 ;
   int__respq_notempty_D = int__respq_notempty ;
   int__respq_full_D = int__respq_full ;
   int__cmdq_empty_D = int__cmdq_empty ;
   intenable__respq_notempty_D = intenable__respq_notempty ;
   intenable__respq_full_D = intenable__respq_full ;
   intenable__cmdq_empty_D = intenable__cmdq_empty ;
   status__respq_notempty_D = status__respq_notempty ;
   status__respq_full_D = status__respq_full ;
   status__cmdq_notempty_D = status__cmdq_notempty ;
   status__cmdq_full_D = status__cmdq_full ;
   status__errorflag_D = status__errorflag ;
   conf__numretriesbeforeerror_D = conf__numretriesbeforeerror ;
   conf__cmdq_almostemptylevel_D = conf__cmdq_almostemptylevel ;
   conf__respq_almostfulllevel_D = conf__respq_almostfulllevel ;
   conf__halfbitdelay_D = conf__halfbitdelay ;
   infifo0__notempty_D = infifo0__notempty ;
   infifo0__full_D = infifo0__full ;
   outfifo0__notempty_D = outfifo0__notempty ;
   outfifo0__full_D = outfifo0__full ;
   sdaoen__val_D = sdaoen__val ;
   sdaoen__res_D = sdaoen__res ;
   scloen__val_D = scloen__val ;
   scloen__res_D = scloen__res ;
   sdain__val_D = sdain__val ;
   sdain__res_D = sdain__res ;
   sclin__val_D = sclin__val ;
   sclin__res_D = sclin__res ;
   scratch_pad_a_0__val_D = scratch_pad_a_0__val ;
   scratch_pad_a_1__val_D = scratch_pad_a_1__val ;
   scratch_pad_a_2__val_D = scratch_pad_a_2__val ;
   scratch_pad_a_3__val_D = scratch_pad_a_3__val ;
   scratch_pad_a_4__val_D = scratch_pad_a_4__val ;
   scratch_pad_a_5__val_D = scratch_pad_a_5__val ;
   scratch_pad_a_6__val_D = scratch_pad_a_6__val ;
   scratch_pad_a_7__val_D = scratch_pad_a_7__val ;
   scratch_pad_a_8__val_D = scratch_pad_a_8__val ;
   scratch_pad_a_9__val_D = scratch_pad_a_9__val ;
   scratch_pad_b_0__val_D = scratch_pad_b_0__val ;
   scratch_pad_b_1__val_D = scratch_pad_b_1__val ;
   scratch_pad_b_2__val_D = scratch_pad_b_2__val ;
   scratch_pad_b_3__val_D = scratch_pad_b_3__val ;
   scratch_pad_b_4__val_D = scratch_pad_b_4__val ;
   scratch_pad_b_5__val_D = scratch_pad_b_5__val ;
   scratch_pad_b_6__val_D = scratch_pad_b_6__val ;
   scratch_pad_b_7__val_D = scratch_pad_b_7__val ;
   scratch_pad_b_8__val_D = scratch_pad_b_8__val ;
   scratch_pad_b_9__val_D = scratch_pad_b_9__val ;
   scratch_pad_c_4__val_D = scratch_pad_c_4__val ;
   scratch_pad_c_4__val_wr_trigger_D = 1'b0 ;
   scratch_pad_c_5__val_D = scratch_pad_c_5__val ;
   scratch_pad_c_5__val_wr_trigger_D = 1'b0 ;
   scratch_pad_d_0__val_D = scratch_pad_d_0__val ;
   scratch_pad_d_0__val_wr_trigger_D = 1'b0 ;
   scratch_pad_d_1__val_D = scratch_pad_d_1__val ;
   scratch_pad_d_1__val_wr_trigger_D = 1'b0 ;
   scratch_pad_d_2__val_D = scratch_pad_d_2__val ;
   scratch_pad_d_2__val_wr_trigger_D = 1'b0 ;
   scratch_pad_d_3__val_D = scratch_pad_d_3__val ;
   scratch_pad_d_3__val_wr_trigger_D = 1'b0 ;
   scratch_pad_d_4__val_D = scratch_pad_d_4__val ;
   scratch_pad_d_4__val_wr_trigger_D = 1'b0 ;
   scratch_pad_d_5__val_D = scratch_pad_d_5__val ;
   scratch_pad_d_5__val_wr_trigger_D = 1'b0 ;
   scratch_pad_d_6__val_D = scratch_pad_d_6__val ;
   scratch_pad_d_6__val_wr_trigger_D = 1'b0 ;
   scratch_pad_d_7__val_D = scratch_pad_d_7__val ;
   scratch_pad_d_7__val_wr_trigger_D = 1'b0 ;
   scratch_pad_d_8__val_D = scratch_pad_d_8__val ;
   scratch_pad_d_8__val_wr_trigger_D = 1'b0 ;
   scratch_pad_d_9__val_D = scratch_pad_d_9__val ;
   scratch_pad_d_9__val_wr_trigger_D = 1'b0 ;
   scratch_pad_d_10__val_D = scratch_pad_d_10__val ;
   scratch_pad_d_10__val_wr_trigger_D = 1'b0 ;
   scratch_pad_d_11__val_D = scratch_pad_d_11__val ;
   scratch_pad_d_11__val_wr_trigger_D = 1'b0 ;
   scratch_pad_d_12__val_D = scratch_pad_d_12__val ;
   scratch_pad_d_12__val_wr_trigger_D = 1'b0 ;
   scratch_pad_d_13__val_D = scratch_pad_d_13__val ;
   scratch_pad_d_13__val_wr_trigger_D = 1'b0 ;
   scratch_pad_d_14__val_D = scratch_pad_d_14__val ;
   scratch_pad_d_14__val_wr_trigger_D = 1'b0 ;
   scratch_pad_d_15__val_D = scratch_pad_d_15__val ;
   scratch_pad_d_15__val_wr_trigger_D = 1'b0 ;
   if (PSEL & PWRITE) begin
      case (PADDR)
         16'h1008 : begin // Int
            int__respq_notempty_D =  wr_en_mask[ 0:0 ] & int__respq_notempty & ~PWDATA[ 0:0 ] 
                                  | ~wr_en_mask[ 0:0 ] & int__respq_notempty ;
            int__respq_full_D =  wr_en_mask[ 1:1 ] & int__respq_full & ~PWDATA[ 1:1 ] 
                              | ~wr_en_mask[ 1:1 ] & int__respq_full ;
            int__cmdq_empty_D =  wr_en_mask[ 2:2 ] & int__cmdq_empty & ~PWDATA[ 2:2 ] 
                              | ~wr_en_mask[ 2:2 ] & int__cmdq_empty ;
         end
         16'h100C : begin // IntEnable
            intenable__respq_notempty_D =  wr_en_mask[ 0:0 ] & PWDATA[ 0:0 ] 
                                        | ~wr_en_mask[ 0:0 ] & intenable__respq_notempty ;
            intenable__respq_full_D =  wr_en_mask[ 1:1 ] & PWDATA[ 1:1 ] 
                                    | ~wr_en_mask[ 1:1 ] & intenable__respq_full ;
            intenable__cmdq_empty_D =  wr_en_mask[ 2:2 ] & PWDATA[ 2:2 ] 
                                    | ~wr_en_mask[ 2:2 ] & intenable__cmdq_empty ;
         end
         16'h1010 : begin // Status
            status__errorflag_D =  wr_en_mask[ 31:31 ] & status__errorflag & ~PWDATA[ 31:31 ] 
                                | ~wr_en_mask[ 31:31 ] & status__errorflag ;
         end
         16'h1014 : begin // Conf
            conf__numretriesbeforeerror_D =  wr_en_mask[ 3:0 ] & PWDATA[ 3:0 ] 
                                          | ~wr_en_mask[ 3:0 ] & conf__numretriesbeforeerror ;
            conf__cmdq_almostemptylevel_D =  wr_en_mask[ 15:8 ] & PWDATA[ 15:8 ] 
                                          | ~wr_en_mask[ 15:8 ] & conf__cmdq_almostemptylevel ;
            conf__respq_almostfulllevel_D =  wr_en_mask[ 23:16 ] & PWDATA[ 23:16 ] 
                                          | ~wr_en_mask[ 23:16 ] & conf__respq_almostfulllevel ;
            conf__halfbitdelay_D =  wr_en_mask[ 31:24 ] & PWDATA[ 31:24 ] 
                                 | ~wr_en_mask[ 31:24 ] & conf__halfbitdelay ;
         end
         16'h1018 : begin // InFifo0
            infifo0__full_D = (wr_en_mask[ 1:1 ] & infifo0__full & ~PWDATA[ 1:1 ] 
                            | ~wr_en_mask[ 1:1 ] & infifo0__full) | infifo0__full_intr ;
         end
         16'h101C : begin // OutFifo0
         end
         16'h1020 : begin // SdaOeN
         end
         16'h1024 : begin // SclOeN
         end
         16'h1028 : begin // SdaIn
         end
         16'h102C : begin // SclIn
         end
         16'h1030 : begin // scratch_pad_a_0
            scratch_pad_a_0__val_D =  wr_en_mask[ 31:0 ] & PWDATA[ 31:0 ] 
                                   | ~wr_en_mask[ 31:0 ] & scratch_pad_a_0__val ;
         end
         16'h1038 : begin // scratch_pad_a_1
            scratch_pad_a_1__val_D =  wr_en_mask[ 31:0 ] & PWDATA[ 31:0 ] 
                                   | ~wr_en_mask[ 31:0 ] & scratch_pad_a_1__val ;
         end
         16'h1040 : begin // scratch_pad_a_2
            scratch_pad_a_2__val_D =  wr_en_mask[ 31:0 ] & PWDATA[ 31:0 ] 
                                   | ~wr_en_mask[ 31:0 ] & scratch_pad_a_2__val ;
         end
         16'h1048 : begin // scratch_pad_a_3
            scratch_pad_a_3__val_D =  wr_en_mask[ 31:0 ] & PWDATA[ 31:0 ] 
                                   | ~wr_en_mask[ 31:0 ] & scratch_pad_a_3__val ;
         end
         16'h1050 : begin // scratch_pad_a_4
            scratch_pad_a_4__val_D =  wr_en_mask[ 31:0 ] & PWDATA[ 31:0 ] 
                                   | ~wr_en_mask[ 31:0 ] & scratch_pad_a_4__val ;
         end
         16'h1058 : begin // scratch_pad_a_5
            scratch_pad_a_5__val_D =  wr_en_mask[ 31:0 ] & PWDATA[ 31:0 ] 
                                   | ~wr_en_mask[ 31:0 ] & scratch_pad_a_5__val ;
         end
         16'h1060 : begin // scratch_pad_a_6
            scratch_pad_a_6__val_D =  wr_en_mask[ 31:0 ] & PWDATA[ 31:0 ] 
                                   | ~wr_en_mask[ 31:0 ] & scratch_pad_a_6__val ;
         end
         16'h1068 : begin // scratch_pad_a_7
            scratch_pad_a_7__val_D =  wr_en_mask[ 31:0 ] & PWDATA[ 31:0 ] 
                                   | ~wr_en_mask[ 31:0 ] & scratch_pad_a_7__val ;
         end
         16'h1070 : begin // scratch_pad_a_8
            scratch_pad_a_8__val_D =  wr_en_mask[ 31:0 ] & PWDATA[ 31:0 ] 
                                   | ~wr_en_mask[ 31:0 ] & scratch_pad_a_8__val ;
         end
         16'h1078 : begin // scratch_pad_a_9
            scratch_pad_a_9__val_D =  wr_en_mask[ 31:0 ] & PWDATA[ 31:0 ] 
                                   | ~wr_en_mask[ 31:0 ] & scratch_pad_a_9__val ;
         end
         16'h1034 : begin // scratch_pad_b_0
            scratch_pad_b_0__val_D =  wr_en_mask[ 31:0 ] & PWDATA[ 31:0 ] 
                                   | ~wr_en_mask[ 31:0 ] & scratch_pad_b_0__val ;
         end
         16'h103C : begin // scratch_pad_b_1
            scratch_pad_b_1__val_D =  wr_en_mask[ 31:0 ] & PWDATA[ 31:0 ] 
                                   | ~wr_en_mask[ 31:0 ] & scratch_pad_b_1__val ;
         end
         16'h1044 : begin // scratch_pad_b_2
            scratch_pad_b_2__val_D =  wr_en_mask[ 31:0 ] & PWDATA[ 31:0 ] 
                                   | ~wr_en_mask[ 31:0 ] & scratch_pad_b_2__val ;
         end
         16'h104C : begin // scratch_pad_b_3
            scratch_pad_b_3__val_D =  wr_en_mask[ 31:0 ] & PWDATA[ 31:0 ] 
                                   | ~wr_en_mask[ 31:0 ] & scratch_pad_b_3__val ;
         end
         16'h1054 : begin // scratch_pad_b_4
            scratch_pad_b_4__val_D =  wr_en_mask[ 31:0 ] & PWDATA[ 31:0 ] 
                                   | ~wr_en_mask[ 31:0 ] & scratch_pad_b_4__val ;
         end
         16'h105C : begin // scratch_pad_b_5
            scratch_pad_b_5__val_D =  wr_en_mask[ 31:0 ] & PWDATA[ 31:0 ] 
                                   | ~wr_en_mask[ 31:0 ] & scratch_pad_b_5__val ;
         end
         16'h1064 : begin // scratch_pad_b_6
            scratch_pad_b_6__val_D =  wr_en_mask[ 31:0 ] & PWDATA[ 31:0 ] 
                                   | ~wr_en_mask[ 31:0 ] & scratch_pad_b_6__val ;
         end
         16'h106C : begin // scratch_pad_b_7
            scratch_pad_b_7__val_D =  wr_en_mask[ 31:0 ] & PWDATA[ 31:0 ] 
                                   | ~wr_en_mask[ 31:0 ] & scratch_pad_b_7__val ;
         end
         16'h1074 : begin // scratch_pad_b_8
            scratch_pad_b_8__val_D =  wr_en_mask[ 31:0 ] & PWDATA[ 31:0 ] 
                                   | ~wr_en_mask[ 31:0 ] & scratch_pad_b_8__val ;
         end
         16'h107C : begin // scratch_pad_b_9
            scratch_pad_b_9__val_D =  wr_en_mask[ 31:0 ] & PWDATA[ 31:0 ] 
                                   | ~wr_en_mask[ 31:0 ] & scratch_pad_b_9__val ;
         end
         16'h1080 : begin // scratch_pad_c_4
            scratch_pad_c_4__val_D =  wr_en_mask[ 31:0 ] & PWDATA[ 31:0 ] 
                                   | ~wr_en_mask[ 31:0 ] & scratch_pad_c_4__val ;
            scratch_pad_c_4__val_wr_trigger_D = 1'b1 ;
         end
         16'h1084 : begin // scratch_pad_c_5
            scratch_pad_c_5__val_D =  wr_en_mask[ 31:0 ] & PWDATA[ 31:0 ] 
                                   | ~wr_en_mask[ 31:0 ] & scratch_pad_c_5__val ;
            scratch_pad_c_5__val_wr_trigger_D = 1'b1 ;
         end
         16'h1088 : begin // scratch_pad_d_0
            scratch_pad_d_0__val_D =  wr_en_mask[ 31:0 ] & PWDATA[ 31:0 ] 
                                   | ~wr_en_mask[ 31:0 ] & scratch_pad_d_0__val ;
            scratch_pad_d_0__val_wr_trigger_D = 1'b1 ;
         end
         16'h108C : begin // scratch_pad_d_1
            scratch_pad_d_1__val_D =  wr_en_mask[ 31:0 ] & PWDATA[ 31:0 ] 
                                   | ~wr_en_mask[ 31:0 ] & scratch_pad_d_1__val ;
            scratch_pad_d_1__val_wr_trigger_D = 1'b1 ;
         end
         16'h1090 : begin // scratch_pad_d_2
            scratch_pad_d_2__val_D =  wr_en_mask[ 31:0 ] & PWDATA[ 31:0 ] 
                                   | ~wr_en_mask[ 31:0 ] & scratch_pad_d_2__val ;
            scratch_pad_d_2__val_wr_trigger_D = 1'b1 ;
         end
         16'h1094 : begin // scratch_pad_d_3
            scratch_pad_d_3__val_D =  wr_en_mask[ 31:0 ] & PWDATA[ 31:0 ] 
                                   | ~wr_en_mask[ 31:0 ] & scratch_pad_d_3__val ;
            scratch_pad_d_3__val_wr_trigger_D = 1'b1 ;
         end
         16'h1098 : begin // scratch_pad_d_4
            scratch_pad_d_4__val_D =  wr_en_mask[ 31:0 ] & PWDATA[ 31:0 ] 
                                   | ~wr_en_mask[ 31:0 ] & scratch_pad_d_4__val ;
            scratch_pad_d_4__val_wr_trigger_D = 1'b1 ;
         end
         16'h109C : begin // scratch_pad_d_5
            scratch_pad_d_5__val_D =  wr_en_mask[ 31:0 ] & PWDATA[ 31:0 ] 
                                   | ~wr_en_mask[ 31:0 ] & scratch_pad_d_5__val ;
            scratch_pad_d_5__val_wr_trigger_D = 1'b1 ;
         end
         16'h10A0 : begin // scratch_pad_d_6
            scratch_pad_d_6__val_D =  wr_en_mask[ 31:0 ] & PWDATA[ 31:0 ] 
                                   | ~wr_en_mask[ 31:0 ] & scratch_pad_d_6__val ;
            scratch_pad_d_6__val_wr_trigger_D = 1'b1 ;
         end
         16'h10A4 : begin // scratch_pad_d_7
            scratch_pad_d_7__val_D =  wr_en_mask[ 31:0 ] & PWDATA[ 31:0 ] 
                                   | ~wr_en_mask[ 31:0 ] & scratch_pad_d_7__val ;
            scratch_pad_d_7__val_wr_trigger_D = 1'b1 ;
         end
         16'h10A8 : begin // scratch_pad_d_8
            scratch_pad_d_8__val_D =  wr_en_mask[ 31:0 ] & PWDATA[ 31:0 ] 
                                   | ~wr_en_mask[ 31:0 ] & scratch_pad_d_8__val ;
            scratch_pad_d_8__val_wr_trigger_D = 1'b1 ;
         end
         16'h10AC : begin // scratch_pad_d_9
            scratch_pad_d_9__val_D =  wr_en_mask[ 31:0 ] & PWDATA[ 31:0 ] 
                                   | ~wr_en_mask[ 31:0 ] & scratch_pad_d_9__val ;
            scratch_pad_d_9__val_wr_trigger_D = 1'b1 ;
         end
         16'h10B0 : begin // scratch_pad_d_10
            scratch_pad_d_10__val_D =  wr_en_mask[ 31:0 ] & PWDATA[ 31:0 ] 
                                    | ~wr_en_mask[ 31:0 ] & scratch_pad_d_10__val ;
            scratch_pad_d_10__val_wr_trigger_D = 1'b1 ;
         end
         16'h10B4 : begin // scratch_pad_d_11
            scratch_pad_d_11__val_D =  wr_en_mask[ 31:0 ] & PWDATA[ 31:0 ] 
                                    | ~wr_en_mask[ 31:0 ] & scratch_pad_d_11__val ;
            scratch_pad_d_11__val_wr_trigger_D = 1'b1 ;
         end
         16'h10B8 : begin // scratch_pad_d_12
            scratch_pad_d_12__val_D =  wr_en_mask[ 31:0 ] & PWDATA[ 31:0 ] 
                                    | ~wr_en_mask[ 31:0 ] & scratch_pad_d_12__val ;
            scratch_pad_d_12__val_wr_trigger_D = 1'b1 ;
         end
         16'h10BC : begin // scratch_pad_d_13
            scratch_pad_d_13__val_D =  wr_en_mask[ 31:0 ] & PWDATA[ 31:0 ] 
                                    | ~wr_en_mask[ 31:0 ] & scratch_pad_d_13__val ;
            scratch_pad_d_13__val_wr_trigger_D = 1'b1 ;
         end
         16'h10C0 : begin // scratch_pad_d_14
            scratch_pad_d_14__val_D =  wr_en_mask[ 31:0 ] & PWDATA[ 31:0 ] 
                                    | ~wr_en_mask[ 31:0 ] & scratch_pad_d_14__val ;
            scratch_pad_d_14__val_wr_trigger_D = 1'b1 ;
         end
         16'h10C4 : begin // scratch_pad_d_15
            scratch_pad_d_15__val_D =  wr_en_mask[ 31:0 ] & PWDATA[ 31:0 ] 
                                    | ~wr_en_mask[ 31:0 ] & scratch_pad_d_15__val ;
            scratch_pad_d_15__val_wr_trigger_D = 1'b1 ;
         end
         default: begin
            wr_decerr = 1'b1 ;
         end
      endcase
   end
   else if (mmio_ext_en && mmio_ext_write) begin // mmo writes
      case (mmio_ext_address)
         8'h0: begin // Int
            int__respq_notempty_D = mmio_ext_wdata [ 0:0 ] ;
            int__respq_full_D = mmio_ext_wdata [ 1:1 ] ;
            int__cmdq_empty_D = mmio_ext_wdata [ 2:2 ] ;
         end
         8'h8: begin // Status
            status__respq_notempty_D = mmio_ext_wdata [ 0:0 ] ;
            status__respq_full_D = mmio_ext_wdata [ 1:1 ] ;
            status__cmdq_notempty_D = mmio_ext_wdata [ 2:2 ] ;
            status__cmdq_full_D = mmio_ext_wdata [ 3:3 ] ;
            status__errorflag_D = mmio_ext_wdata [ 31:31 ] ;
         end
         8'h18: begin // SdaOeN
            sdaoen__val_D = mmio_ext_wdata [ 0:0 ] ;
         end
         8'h1C: begin // SclOeN
            scloen__val_D = mmio_ext_wdata [ 0:0 ] ;
         end
         8'h28: begin // scratch_pad_a_0
            scratch_pad_a_0__val_D = mmio_ext_wdata [ 31:0 ] ;
         end
         8'h2C: begin // scratch_pad_a_1
            scratch_pad_a_1__val_D = mmio_ext_wdata [ 31:0 ] ;
         end
         8'h30: begin // scratch_pad_a_2
            scratch_pad_a_2__val_D = mmio_ext_wdata [ 31:0 ] ;
         end
         8'h34: begin // scratch_pad_a_3
            scratch_pad_a_3__val_D = mmio_ext_wdata [ 31:0 ] ;
         end
         8'h38: begin // scratch_pad_a_4
            scratch_pad_a_4__val_D = mmio_ext_wdata [ 31:0 ] ;
         end
         8'h3C: begin // scratch_pad_a_5
            scratch_pad_a_5__val_D = mmio_ext_wdata [ 31:0 ] ;
         end
         8'h40: begin // scratch_pad_a_6
            scratch_pad_a_6__val_D = mmio_ext_wdata [ 31:0 ] ;
         end
         8'h44: begin // scratch_pad_a_7
            scratch_pad_a_7__val_D = mmio_ext_wdata [ 31:0 ] ;
         end
         8'h48: begin // scratch_pad_a_8
            scratch_pad_a_8__val_D = mmio_ext_wdata [ 31:0 ] ;
         end
         8'h4C: begin // scratch_pad_a_9
            scratch_pad_a_9__val_D = mmio_ext_wdata [ 31:0 ] ;
         end
         8'h50: begin // scratch_pad_b_0
            scratch_pad_b_0__val_D = mmio_ext_wdata [ 31:0 ] ;
         end
         8'h54: begin // scratch_pad_b_1
            scratch_pad_b_1__val_D = mmio_ext_wdata [ 31:0 ] ;
         end
         8'h58: begin // scratch_pad_b_2
            scratch_pad_b_2__val_D = mmio_ext_wdata [ 31:0 ] ;
         end
         8'h5C: begin // scratch_pad_b_3
            scratch_pad_b_3__val_D = mmio_ext_wdata [ 31:0 ] ;
         end
         8'h60: begin // scratch_pad_b_4
            scratch_pad_b_4__val_D = mmio_ext_wdata [ 31:0 ] ;
         end
         8'h64: begin // scratch_pad_b_5
            scratch_pad_b_5__val_D = mmio_ext_wdata [ 31:0 ] ;
         end
         8'h68: begin // scratch_pad_b_6
            scratch_pad_b_6__val_D = mmio_ext_wdata [ 31:0 ] ;
         end
         8'h6C: begin // scratch_pad_b_7
            scratch_pad_b_7__val_D = mmio_ext_wdata [ 31:0 ] ;
         end
         8'h70: begin // scratch_pad_b_8
            scratch_pad_b_8__val_D = mmio_ext_wdata [ 31:0 ] ;
         end
         8'h74: begin // scratch_pad_b_9
            scratch_pad_b_9__val_D = mmio_ext_wdata [ 31:0 ] ;
         end
         8'h78: begin // scratch_pad_c_4
            scratch_pad_c_4__val_D = mmio_ext_wdata [ 31:0 ] ;
            scratch_pad_c_4__val_wr_trigger_D = 1'b1 ;
         end
         8'h7C: begin // scratch_pad_c_5
            scratch_pad_c_5__val_D = mmio_ext_wdata [ 31:0 ] ;
            scratch_pad_c_5__val_wr_trigger_D = 1'b1 ;
         end
         8'h80: begin // scratch_pad_d_0
            scratch_pad_d_0__val_D = mmio_ext_wdata [ 31:0 ] ;
            scratch_pad_d_0__val_wr_trigger_D = 1'b1 ;
         end
         8'h84: begin // scratch_pad_d_1
            scratch_pad_d_1__val_D = mmio_ext_wdata [ 31:0 ] ;
            scratch_pad_d_1__val_wr_trigger_D = 1'b1 ;
         end
         8'h88: begin // scratch_pad_d_2
            scratch_pad_d_2__val_D = mmio_ext_wdata [ 31:0 ] ;
            scratch_pad_d_2__val_wr_trigger_D = 1'b1 ;
         end
         8'h8C: begin // scratch_pad_d_3
            scratch_pad_d_3__val_D = mmio_ext_wdata [ 31:0 ] ;
            scratch_pad_d_3__val_wr_trigger_D = 1'b1 ;
         end
         8'h90: begin // scratch_pad_d_4
            scratch_pad_d_4__val_D = mmio_ext_wdata [ 31:0 ] ;
            scratch_pad_d_4__val_wr_trigger_D = 1'b1 ;
         end
         8'h94: begin // scratch_pad_d_5
            scratch_pad_d_5__val_D = mmio_ext_wdata [ 31:0 ] ;
            scratch_pad_d_5__val_wr_trigger_D = 1'b1 ;
         end
         8'h98: begin // scratch_pad_d_6
            scratch_pad_d_6__val_D = mmio_ext_wdata [ 31:0 ] ;
            scratch_pad_d_6__val_wr_trigger_D = 1'b1 ;
         end
         8'h9C: begin // scratch_pad_d_7
            scratch_pad_d_7__val_D = mmio_ext_wdata [ 31:0 ] ;
            scratch_pad_d_7__val_wr_trigger_D = 1'b1 ;
         end
         8'hA0: begin // scratch_pad_d_8
            scratch_pad_d_8__val_D = mmio_ext_wdata [ 31:0 ] ;
            scratch_pad_d_8__val_wr_trigger_D = 1'b1 ;
         end
         8'hA4: begin // scratch_pad_d_9
            scratch_pad_d_9__val_D = mmio_ext_wdata [ 31:0 ] ;
            scratch_pad_d_9__val_wr_trigger_D = 1'b1 ;
         end
         8'hA8: begin // scratch_pad_d_10
            scratch_pad_d_10__val_D = mmio_ext_wdata [ 31:0 ] ;
            scratch_pad_d_10__val_wr_trigger_D = 1'b1 ;
         end
         8'hAC: begin // scratch_pad_d_11
            scratch_pad_d_11__val_D = mmio_ext_wdata [ 31:0 ] ;
            scratch_pad_d_11__val_wr_trigger_D = 1'b1 ;
         end
         8'hB0: begin // scratch_pad_d_12
            scratch_pad_d_12__val_D = mmio_ext_wdata [ 31:0 ] ;
            scratch_pad_d_12__val_wr_trigger_D = 1'b1 ;
         end
         8'hB4: begin // scratch_pad_d_13
            scratch_pad_d_13__val_D = mmio_ext_wdata [ 31:0 ] ;
            scratch_pad_d_13__val_wr_trigger_D = 1'b1 ;
         end
         8'hB8: begin // scratch_pad_d_14
            scratch_pad_d_14__val_D = mmio_ext_wdata [ 31:0 ] ;
            scratch_pad_d_14__val_wr_trigger_D = 1'b1 ;
         end
         8'hBC: begin // scratch_pad_d_15
            scratch_pad_d_15__val_D = mmio_ext_wdata [ 31:0 ] ;
            scratch_pad_d_15__val_wr_trigger_D = 1'b1 ;
         end
      endcase
   end

end

//--- FF ---
always @(posedge PCLK or negedge PRESETN) begin
   if (PRESETN == 0) begin
      int__respq_notempty <= 1'h1 ;
      int__respq_full <= 1'h0 ;
      int__cmdq_empty <= 1'h0 ;
      intenable__respq_notempty <= 1'h0 ;
      intenable__respq_full <= 1'h0 ;
      intenable__cmdq_empty <= 1'h0 ;
      status__respq_notempty <= 1'h0 ;
      status__respq_full <= 1'h0 ;
      status__cmdq_notempty <= 1'h0 ;
      status__cmdq_full <= 1'h0 ;
      status__errorflag <= 1'h0 ;
      conf__numretriesbeforeerror <= 4'h0 ;
      conf__cmdq_almostemptylevel <= 8'h2 ;
      conf__respq_almostfulllevel <= 8'h2 ;
      conf__halfbitdelay <= 8'h64 ;
      infifo0__full <= 1'h0 ;
      sdaoen__val <= 1'h0 ;
      sdaoen__res <= 31'h0 ;
      scloen__val <= 1'h0 ;
      scloen__res <= 31'h0 ;
      sdain__res <= 31'h0 ;
      sclin__res <= 31'h0 ;
      scratch_pad_a_0__val <= 32'h0 ;
      scratch_pad_a_1__val <= 32'h0 ;
      scratch_pad_a_2__val <= 32'h0 ;
      scratch_pad_a_3__val <= 32'h0 ;
      scratch_pad_a_4__val <= 32'h0 ;
      scratch_pad_a_5__val <= 32'h0 ;
      scratch_pad_a_6__val <= 32'h0 ;
      scratch_pad_a_7__val <= 32'h0 ;
      scratch_pad_a_8__val <= 32'h0 ;
      scratch_pad_a_9__val <= 32'h0 ;
      scratch_pad_b_0__val <= 32'h0 ;
      scratch_pad_b_1__val <= 32'h0 ;
      scratch_pad_b_2__val <= 32'h0 ;
      scratch_pad_b_3__val <= 32'h0 ;
      scratch_pad_b_4__val <= 32'h0 ;
      scratch_pad_b_5__val <= 32'h0 ;
      scratch_pad_b_6__val <= 32'h0 ;
      scratch_pad_b_7__val <= 32'h0 ;
      scratch_pad_b_8__val <= 32'h0 ;
      scratch_pad_b_9__val <= 32'h0 ;
      scratch_pad_c_4__val <= 32'h0 ;
      scratch_pad_c_5__val <= 32'h0 ;
      scratch_pad_d_0__val <= 32'h0 ;
      scratch_pad_d_1__val <= 32'h0 ;
      scratch_pad_d_2__val <= 32'h0 ;
      scratch_pad_d_3__val <= 32'h0 ;
      scratch_pad_d_4__val <= 32'h0 ;
      scratch_pad_d_5__val <= 32'h0 ;
      scratch_pad_d_6__val <= 32'h0 ;
      scratch_pad_d_7__val <= 32'h0 ;
      scratch_pad_d_8__val <= 32'h0 ;
      scratch_pad_d_9__val <= 32'h0 ;
      scratch_pad_d_10__val <= 32'h0 ;
      scratch_pad_d_11__val <= 32'h0 ;
      scratch_pad_d_12__val <= 32'h0 ;
      scratch_pad_d_13__val <= 32'h0 ;
      scratch_pad_d_14__val <= 32'h0 ;
      scratch_pad_d_15__val <= 32'h0 ;
   end
   else if (PSEL_Q & PENABLE) begin
      int__respq_notempty <= int__respq_notempty_D ;
      int__respq_full <= int__respq_full_D ;
      int__cmdq_empty <= int__cmdq_empty_D ;
      intenable__respq_notempty <= intenable__respq_notempty_D ;
      intenable__respq_full <= intenable__respq_full_D ;
      intenable__cmdq_empty <= intenable__cmdq_empty_D ;
      status__respq_notempty <= status__respq_notempty_D ;
      status__respq_full <= status__respq_full_D ;
      status__cmdq_notempty <= status__cmdq_notempty_D ;
      status__cmdq_full <= status__cmdq_full_D ;
      status__errorflag <= status__errorflag_D ;
      conf__numretriesbeforeerror <= conf__numretriesbeforeerror_D ;
      conf__cmdq_almostemptylevel <= conf__cmdq_almostemptylevel_D ;
      conf__respq_almostfulllevel <= conf__respq_almostfulllevel_D ;
      conf__halfbitdelay <= conf__halfbitdelay_D ;
      infifo0__full <= infifo0__full_D ;
      sdaoen__val <= sdaoen__val_D ;
      sdaoen__res <= sdaoen__res_D ;
      scloen__val <= scloen__val_D ;
      scloen__res <= scloen__res_D ;
      sdain__res <= sdain__res_D ;
      sclin__res <= sclin__res_D ;
      scratch_pad_a_0__val <= scratch_pad_a_0__val_D ;
      scratch_pad_a_1__val <= scratch_pad_a_1__val_D ;
      scratch_pad_a_2__val <= scratch_pad_a_2__val_D ;
      scratch_pad_a_3__val <= scratch_pad_a_3__val_D ;
      scratch_pad_a_4__val <= scratch_pad_a_4__val_D ;
      scratch_pad_a_5__val <= scratch_pad_a_5__val_D ;
      scratch_pad_a_6__val <= scratch_pad_a_6__val_D ;
      scratch_pad_a_7__val <= scratch_pad_a_7__val_D ;
      scratch_pad_a_8__val <= scratch_pad_a_8__val_D ;
      scratch_pad_a_9__val <= scratch_pad_a_9__val_D ;
      scratch_pad_b_0__val <= scratch_pad_b_0__val_D ;
      scratch_pad_b_1__val <= scratch_pad_b_1__val_D ;
      scratch_pad_b_2__val <= scratch_pad_b_2__val_D ;
      scratch_pad_b_3__val <= scratch_pad_b_3__val_D ;
      scratch_pad_b_4__val <= scratch_pad_b_4__val_D ;
      scratch_pad_b_5__val <= scratch_pad_b_5__val_D ;
      scratch_pad_b_6__val <= scratch_pad_b_6__val_D ;
      scratch_pad_b_7__val <= scratch_pad_b_7__val_D ;
      scratch_pad_b_8__val <= scratch_pad_b_8__val_D ;
      scratch_pad_b_9__val <= scratch_pad_b_9__val_D ;
      scratch_pad_c_4__val <= scratch_pad_c_4__val_D ;
      scratch_pad_c_5__val <= scratch_pad_c_5__val_D ;
      scratch_pad_d_0__val <= scratch_pad_d_0__val_D ;
      scratch_pad_d_1__val <= scratch_pad_d_1__val_D ;
      scratch_pad_d_2__val <= scratch_pad_d_2__val_D ;
      scratch_pad_d_3__val <= scratch_pad_d_3__val_D ;
      scratch_pad_d_4__val <= scratch_pad_d_4__val_D ;
      scratch_pad_d_5__val <= scratch_pad_d_5__val_D ;
      scratch_pad_d_6__val <= scratch_pad_d_6__val_D ;
      scratch_pad_d_7__val <= scratch_pad_d_7__val_D ;
      scratch_pad_d_8__val <= scratch_pad_d_8__val_D ;
      scratch_pad_d_9__val <= scratch_pad_d_9__val_D ;
      scratch_pad_d_10__val <= scratch_pad_d_10__val_D ;
      scratch_pad_d_11__val <= scratch_pad_d_11__val_D ;
      scratch_pad_d_12__val <= scratch_pad_d_12__val_D ;
      scratch_pad_d_13__val <= scratch_pad_d_13__val_D ;
      scratch_pad_d_14__val <= scratch_pad_d_14__val_D ;
      scratch_pad_d_15__val <= scratch_pad_d_15__val_D ;
   end
end

//--- APB 3.0
assign PREADY = PSEL_Q & PENABLE ;
assign PSLVERR = rd_decerr | wr_decerr;

always @(posedge PCLK or negedge PRESETN) begin
   if (PRESETN == 0) begin
       mmio_ext_rdata <= 'h0;
       mmio_ext_rdata_vld <= 'h0;
   end
   else begin
       mmio_ext_rdata <= mmio_ext_rdata_D;
       mmio_ext_rdata_vld <= mmio_ext_rdata_vld;
   end
end

always @(*) begin
   // --- mmi ---
   mmio_ext_rdata_D = 0;
   mmio_ext_rdata_vld_D = 0;
   if (mmio_ext_en && ~mmio_ext_write) begin
      mmio_ext_rdata_vld_D = 1;
      case (mmio_ext_address)
         8'h0 : begin // Int
            mmio_ext_rdata_D [ 0:0 ] = int__respq_notempty ;
            mmio_ext_rdata_D [ 1:1 ] = int__respq_full ;
            mmio_ext_rdata_D [ 2:2 ] = int__cmdq_empty ;
            mmio_ext_rdata_D [ 31:3 ] = int__res ;
         end
         8'h4 : begin // IntEnable
            mmio_ext_rdata_D [ 0:0 ] = intenable__respq_notempty ;
            mmio_ext_rdata_D [ 1:1 ] = intenable__respq_full ;
            mmio_ext_rdata_D [ 2:2 ] = intenable__cmdq_empty ;
            mmio_ext_rdata_D [ 31:3 ] = intenable__res ;
         end
         8'h8 : begin // Status
            mmio_ext_rdata_D [ 0:0 ] = status__respq_notempty ;
            mmio_ext_rdata_D [ 1:1 ] = status__respq_full ;
            mmio_ext_rdata_D [ 2:2 ] = status__cmdq_notempty ;
            mmio_ext_rdata_D [ 3:3 ] = status__cmdq_full ;
            mmio_ext_rdata_D [ 30:4 ] = status__res ;
            mmio_ext_rdata_D [ 31:31 ] = status__errorflag ;
         end
         8'hC : begin // Conf
            mmio_ext_rdata_D [ 3:0 ] = conf__numretriesbeforeerror ;
            mmio_ext_rdata_D [ 15:8 ] = conf__cmdq_almostemptylevel ;
            mmio_ext_rdata_D [ 23:16 ] = conf__respq_almostfulllevel ;
            mmio_ext_rdata_D [ 31:24 ] = conf__halfbitdelay ;
         end
         8'h10 : begin // InFifo0
            mmio_ext_rdata_D [ 0:0 ] = infifo0__notempty ;
            mmio_ext_rdata_D [ 1:1 ] = infifo0__full ;
         end
         8'h14 : begin // OutFifo0
            mmio_ext_rdata_D [ 0:0 ] = outfifo0__notempty ;
            mmio_ext_rdata_D [ 1:1 ] = outfifo0__full ;
         end
         8'h18 : begin // SdaOeN
            mmio_ext_rdata_D [ 31:1 ] = sdaoen__res ;
         end
         8'h1C : begin // SclOeN
            mmio_ext_rdata_D [ 31:1 ] = scloen__res ;
         end
         8'h20 : begin // SdaIn
            mmio_ext_rdata_D [ 0:0 ] = sdain__val ;
            mmio_ext_rdata_D [ 31:1 ] = sdain__res ;
         end
         8'h24 : begin // SclIn
            mmio_ext_rdata_D [ 0:0 ] = sclin__val ;
            mmio_ext_rdata_D [ 31:1 ] = sclin__res ;
         end
         8'h28 : begin // scratch_pad_a_0
            mmio_ext_rdata_D [ 31:0 ] = scratch_pad_a_0__val ;
         end
         8'h2C : begin // scratch_pad_a_1
            mmio_ext_rdata_D [ 31:0 ] = scratch_pad_a_1__val ;
         end
         8'h30 : begin // scratch_pad_a_2
            mmio_ext_rdata_D [ 31:0 ] = scratch_pad_a_2__val ;
         end
         8'h34 : begin // scratch_pad_a_3
            mmio_ext_rdata_D [ 31:0 ] = scratch_pad_a_3__val ;
         end
         8'h38 : begin // scratch_pad_a_4
            mmio_ext_rdata_D [ 31:0 ] = scratch_pad_a_4__val ;
         end
         8'h3C : begin // scratch_pad_a_5
            mmio_ext_rdata_D [ 31:0 ] = scratch_pad_a_5__val ;
         end
         8'h40 : begin // scratch_pad_a_6
            mmio_ext_rdata_D [ 31:0 ] = scratch_pad_a_6__val ;
         end
         8'h44 : begin // scratch_pad_a_7
            mmio_ext_rdata_D [ 31:0 ] = scratch_pad_a_7__val ;
         end
         8'h48 : begin // scratch_pad_a_8
            mmio_ext_rdata_D [ 31:0 ] = scratch_pad_a_8__val ;
         end
         8'h4C : begin // scratch_pad_a_9
            mmio_ext_rdata_D [ 31:0 ] = scratch_pad_a_9__val ;
         end
         8'h50 : begin // scratch_pad_b_0
            mmio_ext_rdata_D [ 31:0 ] = scratch_pad_b_0__val ;
         end
         8'h54 : begin // scratch_pad_b_1
            mmio_ext_rdata_D [ 31:0 ] = scratch_pad_b_1__val ;
         end
         8'h58 : begin // scratch_pad_b_2
            mmio_ext_rdata_D [ 31:0 ] = scratch_pad_b_2__val ;
         end
         8'h5C : begin // scratch_pad_b_3
            mmio_ext_rdata_D [ 31:0 ] = scratch_pad_b_3__val ;
         end
         8'h60 : begin // scratch_pad_b_4
            mmio_ext_rdata_D [ 31:0 ] = scratch_pad_b_4__val ;
         end
         8'h64 : begin // scratch_pad_b_5
            mmio_ext_rdata_D [ 31:0 ] = scratch_pad_b_5__val ;
         end
         8'h68 : begin // scratch_pad_b_6
            mmio_ext_rdata_D [ 31:0 ] = scratch_pad_b_6__val ;
         end
         8'h6C : begin // scratch_pad_b_7
            mmio_ext_rdata_D [ 31:0 ] = scratch_pad_b_7__val ;
         end
         8'h70 : begin // scratch_pad_b_8
            mmio_ext_rdata_D [ 31:0 ] = scratch_pad_b_8__val ;
         end
         8'h74 : begin // scratch_pad_b_9
            mmio_ext_rdata_D [ 31:0 ] = scratch_pad_b_9__val ;
         end
         8'h78 : begin // scratch_pad_c_4
            mmio_ext_rdata_D [ 31:0 ] = scratch_pad_c_4__val ;
         end
         8'h7C : begin // scratch_pad_c_5
            mmio_ext_rdata_D [ 31:0 ] = scratch_pad_c_5__val ;
         end
         8'h80 : begin // scratch_pad_d_0
            mmio_ext_rdata_D [ 31:0 ] = scratch_pad_d_0__val ;
         end
         8'h84 : begin // scratch_pad_d_1
            mmio_ext_rdata_D [ 31:0 ] = scratch_pad_d_1__val ;
         end
         8'h88 : begin // scratch_pad_d_2
            mmio_ext_rdata_D [ 31:0 ] = scratch_pad_d_2__val ;
         end
         8'h8C : begin // scratch_pad_d_3
            mmio_ext_rdata_D [ 31:0 ] = scratch_pad_d_3__val ;
         end
         8'h90 : begin // scratch_pad_d_4
            mmio_ext_rdata_D [ 31:0 ] = scratch_pad_d_4__val ;
         end
         8'h94 : begin // scratch_pad_d_5
            mmio_ext_rdata_D [ 31:0 ] = scratch_pad_d_5__val ;
         end
         8'h98 : begin // scratch_pad_d_6
            mmio_ext_rdata_D [ 31:0 ] = scratch_pad_d_6__val ;
         end
         8'h9C : begin // scratch_pad_d_7
            mmio_ext_rdata_D [ 31:0 ] = scratch_pad_d_7__val ;
         end
         8'hA0 : begin // scratch_pad_d_8
            mmio_ext_rdata_D [ 31:0 ] = scratch_pad_d_8__val ;
         end
         8'hA4 : begin // scratch_pad_d_9
            mmio_ext_rdata_D [ 31:0 ] = scratch_pad_d_9__val ;
         end
         8'hA8 : begin // scratch_pad_d_10
            mmio_ext_rdata_D [ 31:0 ] = scratch_pad_d_10__val ;
         end
         8'hAC : begin // scratch_pad_d_11
            mmio_ext_rdata_D [ 31:0 ] = scratch_pad_d_11__val ;
         end
         8'hB0 : begin // scratch_pad_d_12
            mmio_ext_rdata_D [ 31:0 ] = scratch_pad_d_12__val ;
         end
         8'hB4 : begin // scratch_pad_d_13
            mmio_ext_rdata_D [ 31:0 ] = scratch_pad_d_13__val ;
         end
         8'hB8 : begin // scratch_pad_d_14
            mmio_ext_rdata_D [ 31:0 ] = scratch_pad_d_14__val ;
         end
         8'hBC : begin // scratch_pad_d_15
            mmio_ext_rdata_D [ 31:0 ] = scratch_pad_d_15__val ;
         end

      endcase
   end
end

endmodule

// FF count = 1414 

// vim:syntax=verilog:
